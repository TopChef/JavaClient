/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */

plugins {
    id "java"
    id "jacoco"
}

tasks.withType(JavaCompile) {
    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.22'

    // Provide an implementation for logging with Logback
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.10'

    // The production code uses the Jackson library to parse and marshall JSON
    compile 'org.code-house:jackson:2.8.7'

    // JetBrains Annotations
    compile group: 'org.jetbrains', name: 'annotations', version: '13.0'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'

    // Add the JUnit-QuickCheck library because this library is awesome
    testCompile 'com.pholser:junit-quickcheck:0.7'

    // Quickcheck also needs some generators to create data types
    testCompile group: 'com.pholser', name: 'junit-quickcheck-generators',
            version: '0.7'

    // JMock provides mock objects for unit testing fun
    testCompile group: 'org.jmock', name: 'jmock', version: '2.5.1'
}

// Jacoco stuff, formulates nice coverage reports

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/main')
        })
    }
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "TopChef-Client",
                "Implementation-Version": 0.1,
                "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
        )
    }
}

check.dependsOn jacocoTestReport

